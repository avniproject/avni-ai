version: 2.1

orbs:
  python: circleci/python@2.1.1
  aws-cli: circleci/aws-cli@4.1.1

commands:
  deploy_as_service:
    description: "Deployment of mvp server using ansible"
    parameters:
      env:
        type: string
        default: "staging"
    steps:
      - attach_workspace:
          at: ~/artifacts

      - run: sudo apt-get install make openssl

      - run: curl -L https://github.com/avniproject/avni-infra/archive/master.zip >> ~/infra.zip

      - run: |
          cd ~/
          unzip infra.zip
          mv avni-infra-master avni-infra
          rm -rf infra.zip

      - run: echo $ANSIBLE_VAULT_PASS > ~/.vault-pass.txt

      - run: |
          pwd
          cd ~/avni-infra/configure
          VAULT_PASSWORD_FILE=~/.vault-pass.txt mcp_zip_path=~/artifacts make deploy-avni-ai-<< parameters.env >>

      - run: rm ~/.vault-pass.txt

  setup_server_access:
    description: Generate and copy temporary keys to server
    parameters:
      instance-id:
        type: string
      os-user:
        type: string
        default: ubuntu
      availability-zone:
        type: string
        default: ap-south-1a
    steps:
      - run: rm -rf /tmp/temp_rsa_key*
      - run: ssh-keygen -b 2048 -t rsa -f /tmp/temp_rsa_key -q -N ""
      - run: eval `ssh-agent -s`
      - run: ssh-add /tmp/temp_rsa_key
      - run: |
          aws ec2-instance-connect send-ssh-public-key --instance-id << parameters.instance-id >> --availability-zone << parameters.availability-zone >> --instance-os-user << parameters.os-user >> --no-paginate --ssh-public-key file:///tmp/temp_rsa_key.pub --output text | head -1

jobs:
  build:
    docker:
      - image: cimg/python:3.13
    steps:
      - checkout
      
      # Install uv
      - run:
          name: Install uv
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$BASH_ENV"
      
      # Cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pyproject.toml" }}
            - v1-dependencies-
      
      # Install dependencies
      - run:
          name: Install dependencies
          command: |
            uv sync --group dev
      
      # Save dependency cache
      - save_cache:
          paths:
            - .venv
          key: v1-dependencies-{{ checksum "pyproject.toml" }}
      
      # Run linting
      - run:
          name: Run linting
          command: |
            uv run ruff check .
            uv run ruff format --check .
      
      # Create build artifact
      - run:
          name: Create build artifact
          command: |
            mkdir -p /tmp/artifacts
            tar -czf /tmp/artifacts/avni-ai.tar.gz \
              --exclude='.git' \
              --exclude='.venv' \
              --exclude='__pycache__' \
              --exclude='*.pyc' \
              --exclude='.pytest_cache' \
              .
      
      # Store artifacts
      - store_artifacts:
          path: /tmp/artifacts
      
      # Persist to workspace
      - persist_to_workspace:
          root: /tmp/artifacts
          paths:
            - avni-ai.tar.gz

  test:
    docker:
      - image: cimg/python:3.13
    steps:
      - checkout
      
      # Install uv
      - run:
          name: Install uv
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$BASH_ENV"
      
      # Restore dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pyproject.toml" }}
      
      # Install dependencies
      - run:
          name: Install dependencies
          command: |
            uv sync --group test
      
      # Run tests
      - run:
          name: Run tests
          command: |
            uv run pytest tests/ -v --cov=main --cov-report=xml --cov-report=html
          environment:
            AVNI_BASE_URL: "https://staging.avniproject.org"
            OPENAI_API_KEY: "test_key_for_unit_tests"
      
      # Store test results
      - store_test_results:
          path: test-results
      
      # Store coverage reports
      - store_artifacts:
          path: htmlcov
          destination: coverage-report

  staging_deploy:
    docker:
      - image: cimg/deploy:2025.01
    steps:
      - attach_workspace:
          at: /tmp/artifacts
      - aws-cli/setup:
          role_arn: "arn:aws:iam::118388513628:role/avni_circleci_instance_connect"
          region: "ap-south-1"
      - setup_server_access:
          instance-id: "i-0879e9c88952968ea"
          availability-zone: "ap-south-1a"
      - deploy_as_service:
          env: "staging"

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - staging_approve:
          type: approval
          requires:
            - test
      - staging_deploy:
          requires:
            - staging_approve
          filters:
            branches:
              only:
                - main
                - production
          context:
            - non-prod-deploy
